import { Component, NgZone, OnInit } from '@angular/core';
import { ModalController, ToastController } from '@ionic/angular';
import { ModalPage } from '../modal/modal.page';
import { NativeStorage } from '@ionic-native/native-storage/ngx';
import { BluetoothLE } from '@ionic-native/bluetooth-le/ngx';
import { DBMeter } from '@ionic-native/db-meter/ngx';

@Component({
  selector: 'app-scenes',
  templateUrl: './scenes.page.html',
  styleUrls: ['./scenes.page.scss'],
})
export class ScenesPage implements OnInit {
  scenes = [];
  subscription: any;
  rAndB:[
    47.149506,
    68.649925,
    70.71783,
    72.135544,
    73.11842,
    79.046906,
    77.75415,
    73.01975,
    82.84886,
    78.747116,
    78.79829,
    79.2494,
    75.29185,
    79.4767,
    78.00137,
    78.149925,
    77.68111,
    81.82664,
    79.15844,
    75.26008,
    80.341225,
    81.626686,
    75.27887,
    77.93252,
    77.632805,
    78.95757,
    79.21643,
    73.86818,
    73.41147,
    75.64354,
    76.469505,
    82.08694,
    77.95695,
    72.58201,
    71.49026,
    74.83311,
    77.359955,
    79.42939,
    81.94739,
    80.91051,
    82.46364,
    78.51056,
    78.615395,
    78.08015,
    80.21948,
    81.5239,
    79.87434,
    80.19656,
    77.5365,
    81.520386,
    74.55833,
    80.25211,
    76.734764,
    78.921585,
    77.34062,
    78.18616,
    76.9886,
    77.4064,
    79.15567,
    80.56558,
    81.7159,
    73.292534,
    72.21807,
    72.23859,
    76.823425,
    74.25672,
    76.42281,
    83.393036,
    79.89217,
    80.5349,
    79.291336,
    80.17112,
    79.49449,
    78.41249,
    81.23426,
    80.55851,
    79.50692,
    77.91975,
    81.65167,
    77.37811,
    78.01824,
    74.644165,
    79.46512,
    78.109375,
    74.45736,
    75.57405,
    73.7347,
    75.70836,
    80.01437,
    76.12808,
    72.05432,
    69.61602,
    76.9969,
    80.7774,
    79.32492,
    84.662994,
    79.67823,
    80.961685,
    80.20476,
    77.290375,
    81.033424,
    77.689865,
    79.70949,
    80.72897,
    78.07806,
    79.32674,
    78.82328,
    74.613045,
    76.961296,
    75.21366,
    76.25544,
    77.78882,
    76.17509,
    73.91053,
    76.55966,
    75.87168,
    77.9272,
    82.21,
    74.44466,
    70.79315,
    72.129326,
    70.465256,
    71.17652,
    74.072914,
    79.431175,
    80.21049,
    77.42785,
    79.99091,
    78.02771,
    77.947395,
    75.958885,
    81.24589,
    78.18616,
    74.47321,
    75.53069,
    81.39351,
    73.2671,
    77.158844,
    74.45101,
    78.09478,
    80.14396,
    79.59519,
    73.2889,
    75.218025,
    75.30481,
    80.915794,
    77.653694,
    72.281494,
    70.41233,
    70.92522,
    79.89472,
    79.92521,
    79.16121,
    83.24892,
    77.49297,
    80.39025,
    76.7968,
    77.4301,
    79.26035,
    79.99595,
    82.4857,
    80.33155,
    81.13847,
    79.29315,
    77.76825,
    76.73354,
    78.08329,
    73.92066,
    77.22486,
    77.43461,
    76.7201,
    77.73894,
    74.15381,
    80.74745,
    78.60359,
    77.43123,
    79.75875,
    79.97916,
    77.66796,
    77.088806,
    76.55343,
    79.01879,
    73.97115,
    76.951775,
    76.405075,
    80.70196,
    78.469666,
    78.547295,
    78.76066,
    78.19751,
    78.73743,
    79.11121,
    81.727585,
    76.10186,
    77.71498,
    77.38491,
    79.11307,
    78.69077,
    81.62877,
    78.680046,
    80.82479
  ];
  rapHip:[
    20.51912,
    63.288044,
    73.4561,
    69.5269,
    71.667076,
    71.375626,
    69.95828,
    73.38279,
    73.77084,
    71.31888,
    72.10856,
    72.14176,
    73.292534,
    76.705414,
    75.274536,
    74.63173,
    75.26586,
    74.577126,
    78.3448,
    75.76587,
    76.70664,
    77.376976,
    76.23348,
    76.5895,
    76.917175,
    73.77599,
    76.949394,
    70.97985,
    75.7399,
    79.12977,
    77.747635,
    77.14255,
    76.74696,
    77.44136,
    76.25931,
    73.76054,
    75.412094,
    78.2037,
    77.30296,
    77.1751,
    76.264465,
    78.62228,
    78.75873,
    79.16767,
    80.025246,
    78.775154,
    79.5644,
    74.852844,
    75.67118,
    69.99019,
    70.32851,
    72.020775,
    69.30865,
    70.65168,
    69.896805,
    81.737885,
    82.14803,
    77.84809,
    73.611404,
    78.002426,
    79.01973,
    74.80876,
    72.236534,
    71.805984,
    70.73976,
    70.58503,
    80.270004,
    81.929955,
    74.7307,
    73.57459,
    72.27946,
    78.278625,
    75.47583,
    73.57284,
    74.07126,
    72.86103,
    74.69989,
    76.39239,
    74.89217,
    79.12142,
    75.20202,
    75.29617,
    81.65791,
    79.83854,
    79.658195,
    78.83671,
    78.252014,
    81.53585,
    78.33059,
    77.34403,
    80.59695,
    77.0241,
    79.32945,
    75.87168,
    74.80114,
    76.91956,
    79.02536,
    77.331505,
    82.22558,
    79.85475,
    79.979996,
    79.716415,
    80.94065,
    78.18202,
    76.791954,
    73.969475,
    74.668976,
    78.66441,
    77.942085,
    77.91868,
    80.1703,
    79.04129,
    80.36778,
    81.026726,
    83.067696,
    77.72152,
    77.95907,
    78.72093,
    78.81271,
    81.880135,
    82.051926,
    73.924034,
    79.83939,
    78.591774,
    78.37315,
    73.24158,
    74.16859,
    71.095116,
    72.895294,
    78.91589,
    79.610985,
    70.68114,
    73.55701,
    77.15768,
    78.9538,
    74.71377,
    73.696686,
    73.56229,
    73.02724,
    74.41282,
    75.50541,
    78.67516,
    78.407455,
    79.39081,
    80.92409,
    81.6253,
    79.37641,
    78.26635,
    77.50304,
    77.61958,
    79.03474,
    78.24278,
    77.55429,
    77.342896,
    77.19944,
    78.05502,
    73.325134,
    72.50089,
    73.90208,
    76.23607,
    75.690475,
    83.08299,
    79.73373,
    78.19441,
    77.86847,
    79.2256,
    75.859535,
    75.20202,
    74.14888,
    75.862236,
    74.69989,
    77.93571,
    75.608864,
    80.26838,
    80.08107,
    79.65558,
    84.16741,
    82.48444,
    77.60193,
    81.533745,
    79.7415,
    81.63919,
    79.40967,
    80.04028,
    81.727585,
    88.01342,
    79.71815,
    74.68599,
    77.60524,
    78.06341,
    83.091805,
    76.38985,
    80.207214,
    79.76306,
    78.354935,
    74.904236,
    81.507,
    71.97866,
    76.10318,
    71.76498,
    72.57807
  ]; 
  randiRona: [
    35.39786,
    70.04047,
    70.90135,
    72.71489,
    79.54852,
    82.97178,
    80.313774,
    78.52647,
    78.45866,
    74.41601,
    74.07955,
    73.41684,
    72.98411,
    71.631996,
    68.71471,
    72.58201,
    71.2434,
    82.51587,
    81.74474,
    81.4547,
    78.683945,
    76.2283,
    74.35521,
    75.47583,
    72.41902,
    74.74913,
    70.88222,
    82.85731,
    83.40551,
    80.39506,
    78.5572,
    76.927925,
    77.2433,
    75.39644,
    73.53233,
    70.82937,
    68.47792,
    80.30569,
    81.3441,
    80.75053,
    77.75741,
    75.399284,
    75.07143,
    74.202965,
    72.17691,
    71.496956,
    71.395966,
    83.96428,
    84.64975,
    80.649216,
    80.11423,
    77.01228,
    74.15381,
    72.394905,
    71.13475,
    70.3438,
    73.8017,
    82.67133,
    81.96679,
    80.24233,
    79.23659,
    79.705154,
    79.30859,
    78.59078,
    76.28635,
    76.6279,
    72.845764,
    81.97214,
    83.06062,
    79.432076,
    79.26309,
    78.04558,
    74.08783,
    74.06794,
    72.931305,
    72.30186,
    72.170715,
    79.27221,
    82.68119,
    80.5899,
    77.58534,
    79.18518,
    76.46195,
    76.6772,
    75.48711,
    74.77518,
    73.53057,
    75.94418,
    84.84916,
    81.31749,
    79.94885,
    80.57108,
    73.80854,
    74.95233,
    72.20369,
    72.08982,
    71.11379,
    77.948456,
    82.96582,
    79.88708,
    80.60398,
    76.58453,
    75.958885,
    74.01467,
    74.30368,
    72.99162,
    74.98376,
    74.67981,
    83.828865,
    81.37206,
    78.7848,
    77.95058,
    77.30982,
    76.35803,
    73.71571,
    72.88959,
    72.74586,
    69.68776,
    83.34754,
    79.99679,
    80.46129,
    78.62326,
    78.45465,
    78.762596,
    76.57832,
    75.16407,
    77.26285,
    73.13876,
    81.155365,
    79.8086,
    78.13643,
    79.211845,
    75.5573,
    77.12039,
    76.345276,
    75.4857,
    74.79656,
    75.447556,
    82.972374,
    80.9271,
    80.21784,
    79.63462,
    79.24757,
    80.29678,
    79.54145,
    72.02708,
    79.89048,
    75.99219,
    80.110916,
    80.03694,
    78.87591,
    79.190704,
    74.86951,
    76.320984,
    74.64727,
    74.5143,
    71.84466,
    71.99342,
    83.42192,
    82.95151,
    81.1671,
    79.35296,
    78.632095,
    75.3235,
    79.085175,
    79.81716,
    75.09652,
    74.29075,
    82.283134,
    81.0972,
    80.50331,
    81.02821,
    78.17582,
    78.76453,
    90.00027,
    78.30414,
    77.41205,
    76.974365,
    80.77357,
    79.95307,
    75.81894,
    75.467354,
    75.877075,
    75.38219,
    78.18719,
    76.11236,
    75.6283,
    78.19648,
    81.23063,
    84.96067,
    80.94742,
    80.40386,
    75.42487,
    75.2485,
    75.444725,
    72.25905,
    72.71489
  ];
  punjabi: [
    29.233692,
    70.2696,
    72.54056,
    75.17138,
    75.68221,
    81.94672,
    75.508224,
    76.540955,
    78.71316,
    77.78666,
    79.05999,
    81.05276,
    77.898415,
    80.67873,
    77.83519,
    78.98117,
    76.92912,
    75.422035,
    75.629684,
    81.34051,
    78.502594,
    76.869225,
    79.2256,
    77.75741,
    77.01228,
    81.18175,
    79.16767,
    76.63037,
    76.67966,
    77.57537,
    77.41205,
    80.85599,
    82.051926,
    81.10163,
    78.08851,
    80.732056,
    78.65561,
    75.37219,
    78.24278,
    76.02007,
    75.786316,
    74.048004,
    75.470184,
    82.38437,
    73.68629,
    75.18745,
    79.28587,
    78.806946,
    82.608864,
    81.35845,
    79.63025,
    73.11842,
    81.12965,
    73.16827,
    76.46447,
    81.24952,
    80.24967,
    75.91472,
    82.81255,
    78.00981,
    75.89053,
    84.34103,
    82.07308,
    77.74981,
    77.4829,
    79.151054,
    70.8894,
    81.92391,
    72.10856,
    75.36934,
    79.36469,
    79.98251,
    76.84033,
    82.539055,
    82.721725,
    73.75537,
    80.43102,
    78.06864,
    82.161766,
    80.37902,
    76.98149,
    79.67736,
    77.968605,
    76.60563,
    77.660286,
    81.933304,
    81.45541,
    76.026695,
    78.697586,
    80.270004,
    73.72608,
    81.541466,
    76.47957,
    75.20202,
    80.79348,
    73.415054,
    76.15553,
    81.913826,
    80.37982,
    79.95054,
    84.39123,
    78.133316,
    81.835464,
    82.302444,
    81.857155,
    81.345535,
    81.882164,
    76.42281,
    73.7347,
    82.08364,
    80.87799,
    77.83196,
    78.933914,
    77.72806,
    83.472084,
    82.827095,
    78.92728,
    76.276054,
    79.82144,
    78.21915,
    74.08286,
    80.73822,
    75.86629,
    81.48795,
    80.72512,
    72.100235,
    79.37911,
    76.818596,
    81.83682,
    81.387794,
    81.58418,
    83.282875,
    83.496216,
    81.90037,
    78.9623,
    80.28056,
    75.06995,
    74.64727,
    74.77518,
    81.974144,
    71.1904,
    71.79305,
    77.63171,
    72.718765,
    71.67801,
    83.66001,
    81.20658,
    79.649475,
    82.226875,
    83.27483,
    80.98716,
    83.6076,
    79.53792,
    80.50885,
    82.859116,
    78.17478,
    73.74849,
    80.51833,
    73.87666,
    71.39371,
    77.603035,
    73.25799,
    73.337776,
    82.505196,
    82.879,
    83.533134,
    82.503944,
    82.08958,
    79.65471,
    79.67649,
    80.29921,
    74.00632,
    81.3692,
    84.11538,
    72.71683,
    75.53209,
    73.448975,
    76.89084,
    80.100975,
    80.3525,
    79.06933,
    81.82324,
    78.03507,
    75.96422,
    81.81168,
    80.52938,
    81.0148,
    81.61277,
    75.19765,
    73.68802,
    78.40947,
    77.663574,
    78.93865,
    80.92182,
    76.03993,
    70.50286,
    76.59695,
    72.09607,
    73.19216
  ];
  constructor(
    public toastController: ToastController,
    private blte: BluetoothLE,
    private ngZone: NgZone,
    private storage: NativeStorage,
    public modalController: ModalController,private dbMeter: DBMeter) {


      }

  onAudioInput(evt) {
    let a =[];
    this.subscription = this.dbMeter.start().subscribe(
      data => {a.push(data);
        // console.log(a);
        console.log(data)
      }
    );
  }
  islisten() {
        // Check if we are listening
        this.dbMeter.isListening().then(
          isListening => console.log(isListening)
        );
    
  }
  stop () {
        
    // Stop listening
    this.subscription.unsubscribe();

  }
  async createScene() {
    const modal = await this.modalController.create({
      component: ModalPage,
      cssClass: 'my-custom-class'
    });
    modal.onDidDismiss()
      .then(() => {
        this.storage.getItem('storedScenes').then(d => {

          this.ngZone.run(() => {
            this.scenes = d;
          })
        }, err => console.log(err));
      });

    return await modal.present();
  }

  delete(j) {
    this.ngZone.run(() => {
      if (j > -1) {
        this.scenes.splice(j, 1);
        this.storage.setItem('storedScenes', this.scenes);
      }
    })
  }
  clear() {
    this.ngZone.run(() => {
      this.scenes = [];
    })
    this.storage.remove('storedScenes');
  }
  ngOnInit() {
    this.storage.getItem('storedScenes').then(d => {
      this.ngZone.run(() => {
        this.scenes = d;
      })
    }, err => console.log(err))
  }

  playScene(i) {
    this.hitValue(i.pat).then(() => {
      this.hitValue(i.color).then(() => {
        this.hitValue(i.speed).then(() => {
          this.hitValue(i.bright);
        })
      })
    }, err => console.log(err));

  }
  hitValue(value) {
    console.log(value);
    const one = new Promise((resolve, reject) => {
      var sendString = value;
      var bytes = this.blte.stringToBytes(sendString);
      var encodedString = this.blte.bytesToEncodedString(bytes);
      this.storage.getItem('connectedTo').then(d => {
        console.log(d)
        this.blte.write({ "value": encodedString, "service": "4FAFC201-1FB5-459E-8FCC-C5C9C331914B", "characteristic": "BEB5483E-36E1-4688-B7F5-EA07361B26A8", "address": d }
        ).then(writeData => { resolve(writeData) }, err => {
          this.presentToast('Something went wrong');
          console.log(err)
        })
      }, err => reject(err))
    });
    return one;

  } async presentToast(message) {
    const toast = await this.toastController.create({
      message: message,
      duration: 2000,
      mode: 'ios',
      position: 'top',
      cssClass: 'toast'
    });
    toast.present();
  }
}
